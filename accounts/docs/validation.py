"""
Documenta√ß√£o Swagger/OpenAPI para rotas de valida√ß√£o
"""

from drf_spectacular.utils import (
    extend_schema,
    OpenApiExample,
    OpenApiResponse,
    OpenApiParameter,
)
from drf_spectacular.openapi import OpenApiTypes

CPF_VALID_RESPONSE_EXAMPLE = OpenApiExample(
    "CPF V√°lido e Dispon√≠vel",
    summary="CPF v√°lido e dispon√≠vel para cadastro",
    description="Resposta quando CPF √© v√°lido e n√£o est√° em uso",
    value={
        "cpf": "12345678901",
        "cpf_formatted": "123.456.789-01",
        "available": True,
        "message": "CPF dispon√≠vel para cadastro",
    },
    response_only=True,
)

CPF_UNAVAILABLE_RESPONSE_EXAMPLE = OpenApiExample(
    "CPF J√° Cadastrado",
    summary="CPF v√°lido mas j√° em uso",
    description="Resposta quando CPF √© v√°lido mas j√° est√° cadastrado",
    value={
        "cpf": "98765432100",
        "cpf_formatted": "987.654.321-00",
        "available": False,
        "message": "CPF j√° cadastrado no sistema",
    },
    response_only=True,
)

CPF_INVALID_RESPONSE_EXAMPLE = OpenApiExample(
    "CPF Inv√°lido",
    summary="CPF com formato ou algoritmo inv√°lido",
    description="Resposta quando CPF n√£o passa na valida√ß√£o",
    value={"error": "CPF inv√°lido."},
    response_only=True,
)

PHONE_VALID_RESPONSE_EXAMPLE = OpenApiExample(
    "Telefone V√°lido",
    summary="Telefone brasileiro v√°lido",
    description="Resposta para telefone com formato correto",
    value={
        "phone": "48999887766",
        "phone_formatted": "(48) 99988-7766",
        "valid": True,
        "message": "Telefone v√°lido",
    },
    response_only=True,
)

PHONE_INVALID_RESPONSE_EXAMPLE = OpenApiExample(
    "Telefone Inv√°lido",
    summary="Telefone com formato incorreto",
    description="Resposta para telefone inv√°lido",
    value={
        "phone": "123456",
        "valid": False,
        "error": "Telefone deve ter 10 ou 11 d√≠gitos (com DDD).",
    },
    response_only=True,
)

CEP_VALID_RESPONSE_EXAMPLE = OpenApiExample(
    "CEP V√°lido",
    summary="CEP brasileiro v√°lido",
    description="Resposta para CEP com formato correto",
    value={
        "cep": "88010000",
        "cep_formatted": "88010-000",
        "valid": True,
        "message": "CEP v√°lido",
    },
    response_only=True,
)

CEP_INVALID_RESPONSE_EXAMPLE = OpenApiExample(
    "CEP Inv√°lido",
    summary="CEP com formato incorreto",
    description="Resposta para CEP inv√°lido",
    value={"cep": "123", "valid": False, "error": "CEP deve ter 8 d√≠gitos."},
    response_only=True,
)

NEIGHBORHOODS_RESPONSE_EXAMPLE = OpenApiExample(
    "Lista de Bairros",
    summary="Bairros de Florian√≥polis",
    description="Lista completa dos bairros aceitos pelo sistema",
    value={
        "neighborhoods": [
            "Abra√£o",
            "Agron√¥mica",
            "Alto Ribeir√£o",
            "Arma√ß√£o",
            "Balne√°rio",
            "Barra da Lagoa",
            "Barra do Sambaqui",
            "Bom Abrigo",
            "Bom Retiro",
            "Cachoeira do Bom Jesus",
            "Cacup√©",
            "Caieira da Barra do Sul",
            "Campeche",
            "Canasvieiras",
            "Canto",
            "Capoeiras",
            "Carvoeira",
            "Centro",
            "Coloninha",
            "Coqueiros",
            "C√≥rrego Grande",
            "Costa de Dentro",
            "Costeira do Pirajuba√©",
            "Daniela",
            "Estreito",
            "Galheta",
            "Ingleses",
            "Itacorubi",
            "Jardim Atl√¢ntico",
            "Jo√£o Paulo",
            "Joaquina",
            "Jos√© Mendes",
            "Jurer√™",
            "Jurer√™ Internacional",
            "Lagoinha",
            "Lagoinha do Leste",
            "Matadeiro",
            "Mole",
            "Monte Cristo",
            "Monte Verde",
            "Pantanal",
            "P√¢ntano do Sul",
            "Ponta das Canas",
            "Praia Brava",
            "Prainha",
            "Ratones",
            "Ribeir√£o da Ilha",
            "Saco dos Lim√µes",
            "Saco Grande",
            "Sambaqui",
            "Santa M√¥nica",
            "Santinho",
            "Santo Ant√¥nio de Lisboa",
            "Sede Fragas",
            "Serrinha",
            "Tapera",
            "Trindade",
            "Vargem do Bom Jesus",
            "Vargem Grande",
            "Vargem Pequena",
        ],
        "total": 57,
        "note": "Lista oficial de bairros de Florian√≥polis aceitos pelo sistema",
    },
    response_only=True,
)

CPF_VALIDATION_SCHEMA = extend_schema(
    operation_id="validate_cpf_availability",
    summary="Validar disponibilidade de CPF",
    description="""
    Verifica se um CPF √© v√°lido e est√° dispon√≠vel para cadastro.

    **Valida√ß√µes Realizadas:**

    **üîç Formato:**
    - Aceita CPF com ou sem formata√ß√£o
    - Remove automaticamente pontos e h√≠fens
    - Verifica se tem exatamente 11 d√≠gitos

    **üßÆ Algoritmo:**
    - Valida√ß√£o completa do algoritmo brasileiro
    - C√°lculo dos d√≠gitos verificadores
    - Rejeita CPFs com todos os d√≠gitos iguais

    **üíæ Disponibilidade:**
    - Verifica se CPF j√° est√° cadastrado
    - Busca em toda a base de dados
    - Retorna status de disponibilidade

    **üì§ Resposta:**
    - CPF limpo (apenas n√∫meros)
    - CPF formatado (XXX.XXX.XXX-XX)
    - Status de disponibilidade
    - Mensagem descritiva

    **üí° Casos de Uso:**
    - Valida√ß√£o em tempo real em formul√°rios
    - Verifica√ß√£o antes do cadastro
    - Integra√ß√£o com frontend
    """,
    tags=["Valida√ß√£o"],
    parameters=[
        OpenApiParameter(
            name="cpf",
            type=OpenApiTypes.STR,
            location=OpenApiParameter.QUERY,
            description="CPF a ser validado (com ou sem formata√ß√£o)",
            required=True,
            examples=[
                OpenApiExample(
                    "CPF sem formata√ß√£o",
                    summary="CPF apenas n√∫meros",
                    value="12345678901",
                ),
                OpenApiExample(
                    "CPF formatado",
                    summary="CPF com pontos e h√≠fen",
                    value="123.456.789-01",
                ),
                OpenApiExample(
                    "CPF com espa√ßos",
                    summary="CPF com espa√ßos extras",
                    value=" 123 456 789 01 ",
                ),
            ],
        )
    ],
    responses={
        200: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description="Valida√ß√£o realizada com sucesso",
            examples=[CPF_VALID_RESPONSE_EXAMPLE, CPF_UNAVAILABLE_RESPONSE_EXAMPLE],
        ),
        400: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description="CPF inv√°lido ou n√£o fornecido",
            examples=[
                CPF_INVALID_RESPONSE_EXAMPLE,
                OpenApiExample(
                    "CPF N√£o Fornecido", value={"error": "CPF √© obrigat√≥rio"}
                ),
                OpenApiExample(
                    "CPF Muito Curto", value={"error": "CPF deve ter 11 d√≠gitos"}
                ),
            ],
        ),
    },
)

PHONE_VALIDATION_SCHEMA = extend_schema(
    operation_id="validate_phone_number",
    summary="Validar telefone brasileiro",
    description="""
    Valida formato de telefone brasileiro com DDD.

    **Formatos Aceitos:**

    **üì± Celular (11 d√≠gitos):**
    - Formato: (XX) 9XXXX-XXXX
    - Terceiro d√≠gito deve ser 9
    - Exemplo: 48999887766

    **‚òéÔ∏è Fixo (10 d√≠gitos):**
    - Formato: (XX) XXXX-XXXX
    - Sem o d√≠gito 9 inicial
    - Exemplo: 4833334444

    **üåç DDD V√°lidos:**
    - Faixa: 11 a 99
    - Valida√ß√£o de DDDs brasileiros
    - Rejeita DDDs inv√°lidos

    **üîß Processamento:**
    - Remove caracteres n√£o num√©ricos
    - Valida quantidade de d√≠gitos
    - Verifica regras espec√≠ficas
    - Formata para exibi√ß√£o

    **üì§ Resposta:**
    - Telefone original
    - Telefone formatado
    - Status de validade
    - Mensagem de erro (se inv√°lido)
    """,
    tags=["Valida√ß√£o"],
    parameters=[
        OpenApiParameter(
            name="phone",
            type=OpenApiTypes.STR,
            location=OpenApiParameter.QUERY,
            description="Telefone a ser validado",
            required=True,
            examples=[
                OpenApiExample(
                    "Celular", summary="Celular com DDD", value="48999887766"
                ),
                OpenApiExample("Fixo", summary="Telefone fixo", value="4833334444"),
                OpenApiExample(
                    "Com formata√ß√£o",
                    summary="Telefone formatado",
                    value="(48) 99988-7766",
                ),
                OpenApiExample(
                    "Com espa√ßos",
                    summary="Telefone com espa√ßos",
                    value="48 9 9988 7766",
                ),
            ],
        )
    ],
    responses={
        200: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description="Telefone v√°lido",
            examples=[PHONE_VALID_RESPONSE_EXAMPLE],
        ),
        400: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description="Telefone inv√°lido",
            examples=[
                PHONE_INVALID_RESPONSE_EXAMPLE,
                OpenApiExample(
                    "Telefone N√£o Fornecido", value={"error": "Telefone √© obrigat√≥rio"}
                ),
                OpenApiExample(
                    "DDD Inv√°lido",
                    value={
                        "phone": "0999887766",
                        "valid": False,
                        "error": "DDD inv√°lido.",
                    },
                ),
            ],
        ),
    },
)

CEP_VALIDATION_SCHEMA = extend_schema(
    operation_id="validate_cep_format",
    summary="Validar CEP brasileiro",
    description="""
    Valida formato de CEP brasileiro.

    **Formato Esperado:**
    - 8 d√≠gitos num√©ricos
    - Com ou sem h√≠fen
    - Exemplos: 88010000, 88010-000

    **Valida√ß√µes:**

    **üìè Comprimento:**
    - Exatamente 8 d√≠gitos ap√≥s limpeza
    - Remove h√≠fens automaticamente
    - Rejeita CEPs muito curtos/longos

    **üö´ Valores Inv√°lidos:**
    - CEP 00000000 (gen√©rico)
    - Apenas letras ou s√≠mbolos
    - Formatos incorretos

    **üîß Processamento:**
    - Remove caracteres n√£o num√©ricos
    - Valida comprimento
    - Verifica valores especiais
    - Formata para exibi√ß√£o (XXXXX-XXX)

    **üì§ Resposta:**
    - CEP original
    - CEP formatado
    - Status de validade
    - Mensagem de erro (se inv√°lido)

    **‚ö†Ô∏è Limita√ß√µes:**
    - N√£o verifica exist√™ncia real
    - Apenas valida√ß√£o de formato
    - Para valida√ß√£o completa, use APIs dos Correios
    """,
    tags=["Valida√ß√£o"],
    parameters=[
        OpenApiParameter(
            name="cep",
            type=OpenApiTypes.STR,
            location=OpenApiParameter.QUERY,
            description="CEP a ser validado",
            required=True,
            examples=[
                OpenApiExample(
                    "CEP sem h√≠fen", summary="CEP apenas n√∫meros", value="88010000"
                ),
                OpenApiExample(
                    "CEP com h√≠fen", summary="CEP formatado", value="88010-000"
                ),
                OpenApiExample(
                    "CEP com espa√ßos", summary="CEP com espa√ßos", value=" 88010 000 "
                ),
            ],
        )
    ],
    responses={
        200: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description="CEP v√°lido",
            examples=[CEP_VALID_RESPONSE_EXAMPLE],
        ),
        400: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description="CEP inv√°lido",
            examples=[
                CEP_INVALID_RESPONSE_EXAMPLE,
                OpenApiExample(
                    "CEP N√£o Fornecido", value={"error": "CEP √© obrigat√≥rio"}
                ),
                OpenApiExample(
                    "CEP Gen√©rico",
                    value={"cep": "00000000", "valid": False, "error": "CEP inv√°lido."},
                ),
            ],
        ),
    },
)

NEIGHBORHOODS_LIST_SCHEMA = extend_schema(
    operation_id="list_florianopolis_neighborhoods",
    summary="Listar bairros de Florian√≥polis",
    description="""
    Retorna lista completa de bairros v√°lidos de Florian√≥polis.

    **Finalidade:**
    - Valida√ß√£o de endere√ßos
    - Preenchimento de formul√°rios
    - Filtros de busca
    - Integra√ß√£o com frontend

    **Caracter√≠sticas:**

    **üìç Cobertura Completa:**
    - Todos os bairros oficiais de Florian√≥polis
    - Lista atualizada e verificada
    - Inclui bairros centrais e perif√©ricos
    - Cobertura de toda a ilha

    **üî§ Ordena√ß√£o:**
    - Ordem alfab√©tica
    - Facilita busca visual
    - Consistente entre chamadas

    **üìä Metadados:**
    - Total de bairros
    - Nota explicativa
    - Informa√ß√µes adicionais

    **üí° Casos de Uso:**
    - Dropdown/select em formul√°rios
    - Autocomplete de endere√ßos
    - Valida√ß√£o de bairros
    - Filtros de busca geogr√°fica

    **üîÑ Atualiza√ß√£o:**
    - Lista est√°tica otimizada
    - Cache-friendly
    - Resposta r√°pida
    - Sem consulta ao banco

    **üéØ Integra√ß√£o:**
    - Usar com valida√ß√£o de perfis
    - Combinar com APIs de CEP
    - Filtros administrativos
    """,
    tags=["Valida√ß√£o"],
    responses={
        200: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description="Lista de bairros obtida com sucesso",
            examples=[NEIGHBORHOODS_RESPONSE_EXAMPLE],
        )
    },
)
